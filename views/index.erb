<div class="container mt-4">
    <div class="row">
      <div class="col-12">
        <div class="chart-container">
          <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
              <h2 class="h4 mb-0 text-primary"><%= @display_symbol %> <%= @range_labels[@selected_range] %> Fiyat Verileri</h2>
              <% if @data_source %>
                <small class="text-muted">📊 Veri Kaynağı: <%= @data_source %></small>
              <% else %>
                <small class="text-muted">📊 Veri Kaynağı: Yahoo Finance</small>
              <% end %>
              <% 
                # Split bilgisini göster
                split_info = {
                  'ADEL' => { date: '15.11.2023', ratio: '1:10', description: 'Hisse Bölünmesi' },
                  'THYAO' => { date: '20.05.2022', ratio: '1:5', description: 'Hisse Bölünmesi' },
                  'AKBNK' => { date: '15.04.2021', ratio: '1:2', description: 'Hisse Bölünmesi' }
                }[@display_symbol]
              %>
              <% if split_info %>
                <br><small class="text-warning">⚡ <%= split_info[:description] %>: <%= split_info[:ratio] %> (<%= split_info[:date] %>) - Split-adjusted veriler</small>
              <% end %>
            </div>
            <div class="btn-group" role="group">
              <% @range_labels.each do |range_key, range_label| %>
                <a href="/?:symbol=<%= @display_symbol %>&range=<%= range_key %><%= params[:theme] ? "&theme=#{params[:theme]}" : '' %>" 
                   class="btn btn-outline-primary btn-sm <%= 'active' if @selected_range == range_key %>">
                  <%= range_label %>
                </a>
              <% end %>
            </div>
          </div>
          
          <!-- Hareketli Ortalama Kontrolleri -->
          <div class="row mb-3">
            <div class="col-12">
              <div class="d-flex align-items-center gap-3">
                <span class="text-muted">📈 Hareketli Ortalamalar:</span>
                <div class="form-check form-switch">
                  <input class="form-check-input" type="checkbox" id="ma20Toggle">
                  <label class="form-check-label" for="ma20Toggle">
                    <span style="color: #ff6b6b;">■</span> MA20
                  </label>
                </div>
                <div class="form-check form-switch">
                  <input class="form-check-input" type="checkbox" id="ma50Toggle">
                  <label class="form-check-label" for="ma50Toggle">
                    <span style="color: #4ecdc4;">■</span> MA50
                  </label>
                </div>
                <div class="form-check form-switch">
                  <input class="form-check-input" type="checkbox" id="ma200Toggle">
                  <label class="form-check-label" for="ma200Toggle">
                    <span style="color: #45b7d1;">■</span> MA200
                  </label>
                </div>
                <% if @rsi_data && @rsi_data.length > 0 %>
                <div class="form-check form-switch">
                  <input class="form-check-input" type="checkbox" id="rsiToggle" checked>
                  <label class="form-check-label" for="rsiToggle">
                    <span style="color: #9b59b6;">■</span> RSI (14)
                  </label>
                </div>
                <div class="ms-2">
                  <span class="badge <%= @rsi_analysis[:badge_class] %> rsi-current-badge" 
                        title="<%= @rsi_analysis[:level] %> - <%= @rsi_analysis[:signal] %>">
                    📊 <%= @current_rsi %>
                  </span>
                  <small class="text-muted ms-1"><%= @rsi_analysis[:signal] %></small>
                </div>
                <% end %>
              </div>
            </div>
          </div>
          
          <div class="row mb-3">
            <div class="col-md-6">
              <div class="d-flex align-items-center mb-2">
                <span class="text-muted me-2">📈 Kanal Analizi</span>
              </div>
              <div class="d-flex flex-wrap gap-2">
                <span class="badge bg-danger">Kanal Tepe: <span id="channelTop"></span> TL</span>
                <span class="badge bg-success">Kanal Dip: <span id="channelBottom"></span> TL</span>
                <span class="badge bg-info">Orta Bant: <span id="channelMiddle"></span> TL</span>
              </div>
              <div class="d-flex flex-wrap gap-2 mt-2">
                <span class="badge bg-warning text-dark">Trend: <span id="trendDirection"></span></span>
                <span class="badge bg-secondary">Süre: <span id="channelDays"></span> gün</span>
              </div>
            </div>
            
            <div class="col-md-6">
              <div class="d-flex align-items-center mb-2">
                <span class="text-muted me-2">🎯 Destek & Direnç</span>
              </div>
              <div class="d-flex flex-wrap gap-2 mb-2">
                <span class="badge" style="background-color: #ffa500;">Destek: <span id="supportPrice"></span> TL</span>
                <span class="badge" style="background-color: #800080;">Direnç: <span id="resistancePrice"></span> TL</span>
              </div>
              <div class="d-flex align-items-center mb-2">
                <span class="text-muted me-2">📊 Günlük Veriler</span>
              </div>
              <div class="d-flex flex-wrap gap-1">
                <span class="badge bg-dark">A: <span id="dailyOpen"></span></span>
                <span class="badge bg-dark">Y: <span id="dailyHigh"></span></span>
                <span class="badge bg-dark">D: <span id="dailyLow"></span></span>
                <span class="badge bg-dark">K: <span id="dailyClose"></span></span>
              </div>
            </div>
          </div>
          
          <div id="priceChart" style="height: 500px;"></div>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const priceData = <%= @price_data.to_json %>;
      const prices = priceData.map(d => d.close);
      const dates = priceData.map(d => d.date);

      // Veri kontrolü
      if (!priceData || priceData.length < 1) {
        console.error('Yetersiz veri:', priceData);
        document.getElementById('priceChart').innerHTML = '<div class="alert alert-warning">Veri yüklenemedi. Lütfen sayfayı yenileyin.</div>';
        return;
      }
      
      console.log('Veri yüklendi:', priceData.length, 'kayıt');

      // Hareketli ortalama hesaplama fonksiyonu
      function calculateMovingAverage(data, period) {
        const ma = [];
        for (let i = 0; i < data.length; i++) {
          if (i < period - 1) {
            ma.push(null); // Yeterli veri yoksa null
          } else {
            const sum = data.slice(i - period + 1, i + 1).reduce((a, b) => a + b, 0);
            ma.push(sum / period);
          }
        }
        return ma;
      }

      // Hareketli ortalamaları hesapla
      const ma20 = calculateMovingAverage(prices, 20);
      const ma50 = calculateMovingAverage(prices, 50);
      const ma200 = calculateMovingAverage(prices, 200);

      // Son 2 yılın dip ve zirve noktalarını bul
      function findExtremePoints() {
        let globalMin = { value: Infinity, index: -1, date: '' };
        let globalMax = { value: -Infinity, index: -1, date: '' };
        
        priceData.forEach((data, index) => {
          if (data.low < globalMin.value) {
            globalMin = { value: data.low, index: index, date: data.date };
          }
          if (data.high > globalMax.value) {
            globalMax = { value: data.high, index: index, date: data.date };
          }
        });
        
        return { globalMin, globalMax };
      }
      
      const extremePoints = findExtremePoints();
      console.log('Ekstrem noktalar:', extremePoints);

      // Zaman dilimine göre analiz stratejisi
      const dataLength = prices.length;
      let analysisWindow, channelWindow;
      
      if (dataLength <= 7) {        // 1 hafta
        analysisWindow = dataLength;
        channelWindow = dataLength;
      } else if (dataLength <= 30) { // 1 ay
        analysisWindow = Math.min(20, dataLength);
        channelWindow = dataLength; // Tüm veri
      } else if (dataLength <= 90) { // 3 ay
        analysisWindow = Math.min(60, dataLength);
        channelWindow = dataLength; // Tüm veri
      } else if (dataLength <= 180) { // 6 ay
        analysisWindow = Math.min(90, dataLength); // Son 3 ay
        channelWindow = dataLength; // Tüm veri
      } else if (dataLength <= 365) { // 1 yıl
        analysisWindow = Math.min(120, dataLength); // Son 4 ay
        channelWindow = dataLength; // Tüm 1 yıllık veri
      } else {                      // 2 yıl
        analysisWindow = Math.min(120, dataLength); // Son 4 ay (destek/direnç için)
        channelWindow = dataLength; // Tüm 2 yıllık veri
      }
      
      // Destek/direnç için son dönem verilerini al
      const recentPriceData = priceData.slice(-analysisWindow);
      const recentPrices = recentPriceData.map(d => d.close);
      const recentHighs = recentPriceData.map(d => d.high);
      const recentLows = recentPriceData.map(d => d.low);
      
      // Kanal seviyeleri için daha geniş veri kullan
      const channelPriceData = priceData.slice(-channelWindow);
      
      // Veriyi daha dikkatli filtrele
      const validChannelData = channelPriceData.filter(d => 
        d && d.high != null && d.low != null && 
        d.high > 0 && d.low > 0 && 
        !isNaN(d.high) && !isNaN(d.low)
      );
      
      const channelHighs = validChannelData.map(d => d.high);
      const channelLows = validChannelData.map(d => d.low);
      
      // Kanal seviyeleri - geçerli verilerden
      const maxPrice = channelHighs.length > 0 ? Math.max(...channelHighs) : Math.max(...prices);
      const minPrice = channelLows.length > 0 ? Math.min(...channelLows) : Math.min(...prices);
      
      console.log('Kanal veri kontrolü:', {
        totalData: channelPriceData.length,
        validData: validChannelData.length,
        invalidData: channelPriceData.length - validChannelData.length,
        minPrice: minPrice.toFixed(2),
        maxPrice: maxPrice.toFixed(2),
        sampleData: validChannelData.slice(0, 3).map(d => ({high: d.high, low: d.low}))
      });
      
      // Trend yönü - daha hassas hesaplama
      const trendSampleSize = Math.max(5, Math.floor(recentPrices.length * 0.25));
      const firstPeriodAvg = recentPrices.slice(0, trendSampleSize).reduce((a, b) => a + b, 0) / trendSampleSize;
      const lastPeriodAvg = recentPrices.slice(-trendSampleSize).reduce((a, b) => a + b, 0) / trendSampleSize;
      
      // Trend gücünü de hesapla
      const trendStrength = Math.abs(lastPeriodAvg - firstPeriodAvg) / firstPeriodAvg * 100;
      let trendDirection;
      
      if (trendStrength < 2) {
        trendDirection = 'Yatay';
      } else if (lastPeriodAvg > firstPeriodAvg) {
        trendDirection = trendStrength > 10 ? 'Güçlü Yükselen' : 'Yükselen';
      } else {
        trendDirection = trendStrength > 10 ? 'Güçlü Düşen' : 'Düşen';
      }
      const channelDays = dates.length;

      // Bilgileri DOM'a yazdir
      document.getElementById('channelTop').textContent = maxPrice.toFixed(2);
      document.getElementById('channelBottom').textContent = minPrice.toFixed(2);
      document.getElementById('channelMiddle').textContent = ((maxPrice + minPrice) / 2).toFixed(2);
      document.getElementById('trendDirection').textContent = trendDirection;
      document.getElementById('channelDays').textContent = channelDays;

      // Destek ve Direnç Hesaplama - esnek yöntem
      const analysisData = recentPriceData;
      const currentPrice = analysisData[analysisData.length - 1].close;
      
      // Swing point analizi - zaman dilimine göre uyarlanmış
      let swingWindow;
      if (dataLength <= 30) {
        swingWindow = 1; // Kısa dönemde 1 günlük pencere
      } else if (dataLength <= 90) {
        swingWindow = 2; // Orta dönemde 2 günlük pencere
      } else {
        swingWindow = 3; // Uzun dönemde 3 günlük pencere
      }
      
      const swingHighs = [];
      const swingLows = [];
      
      // Daha esnek swing point bulma
      for (let i = swingWindow; i < analysisData.length - swingWindow; i++) {
        const current = analysisData[i];
        let isSwingHigh = true;
        let isSwingLow = true;
        
        // Önceki ve sonraki günlerle karşılaştır
        for (let j = 1; j <= swingWindow; j++) {
          if (current.high <= analysisData[i-j].high || current.high <= analysisData[i+j].high) {
            isSwingHigh = false;
          }
          if (current.low >= analysisData[i-j].low || current.low >= analysisData[i+j].low) {
            isSwingLow = false;
          }
        }
        
        if (isSwingHigh) swingHighs.push(current.high);
        if (isSwingLow) swingLows.push(current.low);
      }
      
      // Destek ve direnç hesaplama
      let support1, resistance1;
      
      // Önce swing point'leri dene
      if (swingLows.length > 0) {
        const validSupports = swingLows.filter(low => low < currentPrice);
        support1 = validSupports.length > 0 ? Math.max(...validSupports) : Math.min(...recentLows);
      } else {
        // Fallback: Alt %25'lik dilim
        const sortedLows = [...recentLows].sort((a, b) => a - b);
        support1 = sortedLows[Math.floor(sortedLows.length * 0.25)];
      }
      
      if (swingHighs.length > 0) {
        const validResistances = swingHighs.filter(high => high > currentPrice);
        resistance1 = validResistances.length > 0 ? Math.min(...validResistances) : Math.max(...recentHighs);
      } else {
        // Fallback: Üst %25'lik dilim
        const sortedHighs = [...recentHighs].sort((a, b) => b - a);
        resistance1 = sortedHighs[Math.floor(sortedHighs.length * 0.25)];
      }
      
      // Son kontrol - eğer hala bulunamadıysa basit yöntem
      if (!support1 || support1 >= currentPrice) {
        const sortedLows = [...recentLows].sort((a, b) => a - b);
        support1 = sortedLows[Math.floor(sortedLows.length * 0.3)];
      }
      
      if (!resistance1 || resistance1 <= currentPrice) {
        const sortedHighs = [...recentHighs].sort((a, b) => b - a);
        resistance1 = sortedHighs[Math.floor(sortedHighs.length * 0.3)];
      }
      
      console.log('Analiz Bilgileri:', {
        dataLength,
        analysisWindow,
        channelWindow,
        swingWindow,
        swingHighs: swingHighs.length,
        swingLows: swingLows.length,
        currentPrice: currentPrice.toFixed(2),
        support1: support1.toFixed(2),
        resistance1: resistance1.toFixed(2),
        channelRange: `${minPrice.toFixed(2)} - ${maxPrice.toFixed(2)}`,
        channelMiddle: ((maxPrice + minPrice) / 2).toFixed(2),
        pricePosition: `Min: ${Math.min(...prices).toFixed(2)}, Max: ${Math.max(...prices).toFixed(2)}`
      });

      document.getElementById('supportPrice').textContent = support1.toFixed(2);
      document.getElementById('resistancePrice').textContent = resistance1.toFixed(2);

      // Günlük Bilgileri DOM'a yazdır
      const lastDay = priceData[priceData.length - 1];
      document.getElementById('dailyOpen').textContent = lastDay.open.toFixed(2);
      document.getElementById('dailyHigh').textContent = lastDay.high.toFixed(2);
      document.getElementById('dailyLow').textContent = lastDay.low.toFixed(2);
      document.getElementById('dailyClose').textContent = lastDay.close.toFixed(2);

      // Hareketli ortalama trace'leri
      const ma20Trace = {
        x: dates,
        y: ma20,
        type: 'scatter',
        mode: 'lines',
        name: 'MA20',
        line: {
          color: '#ff6b6b',
          width: 2
        },
        visible: false // Başlangıçta gizli
      };

      const ma50Trace = {
        x: dates,
        y: ma50,
        type: 'scatter',
        mode: 'lines',
        name: 'MA50',
        line: {
          color: '#4ecdc4',
          width: 2
        },
        visible: false // Başlangıçta gizli
      };

      const ma200Trace = {
        x: dates,
        y: ma200,
        type: 'scatter',
        mode: 'lines',
        name: 'MA200',
        line: {
          color: '#45b7d1',
          width: 2
        },
        visible: false // Başlangıçta gizli
      };

      // Plotly.js ile mum grafiği oluştur
      const candlestickTrace = {
        x: dates,
        close: priceData.map(d => d.close),
        decreasing: {line: {color: '#ef5350'}},
        high: priceData.map(d => d.high),
        increasing: {line: {color: '#26a69a'}},
        line: {color: 'rgba(31,119,180,1)'},
        low: priceData.map(d => d.low),
        open: priceData.map(d => d.open),
        type: 'candlestick',
        name: 'Fiyat',
        xaxis: 'x',
        yaxis: 'y',
        hovertemplate: 
          '<b>📅 %{x}</b><br>' +
          '<span style="color:#28a745">🟢 Açılış: %{open:.2f} TL</span><br>' +
          '<span style="color:#dc3545">🔴 Yüksek: %{high:.2f} TL</span><br>' +
          '<span style="color:#6f42c1">🟣 Düşük: %{low:.2f} TL</span><br>' +
          '<span style="color:#007bff">🔵 Kapanış: %{close:.2f} TL</span><br>' +
          '<extra></extra>',
        hoverlabel: {
          bgcolor: 'rgba(0, 0, 0, 0.9)',
          bordercolor: '#007bff',
          font: {
            color: 'white',
            size: 13,
            family: 'Arial, sans-serif'
          }
        }
      };

      // Teknik çizgiler - zaman dilimine göre uyarlanmış
      const shapes = [];
      
      // Destek ve direnç çizgileri için başlangıç noktası
      let supportStartRatio;
      if (dataLength <= 30) {
        supportStartRatio = 0.3; // Kısa dönemde %30'dan başla
      } else if (dataLength <= 90) {
        supportStartRatio = 0.5; // Orta dönemde ortadan başla
      } else {
        supportStartRatio = 0.7; // Uzun dönemde son %30'luk kısımda
      }
      
      const supportStartIndex = Math.floor(dates.length * supportStartRatio);
      
      // Destek çizgisi - daha esnek koşul
      if (support1 && support1 > minPrice * 0.95 && support1 < maxPrice * 1.05) {
        shapes.push({
          type: 'line',
          x0: dates[supportStartIndex],
          y0: support1,
          x1: dates[dates.length - 1],
          y1: support1,
          line: {
            color: '#ffa500',
            width: 2,
            dash: 'dash'
          }
        });
      }
      
      // Direnç çizgisi - daha esnek koşul
      if (resistance1 && resistance1 > minPrice * 0.95 && resistance1 < maxPrice * 1.05) {
        shapes.push({
          type: 'line',
          x0: dates[supportStartIndex],
          y0: resistance1,
          x1: dates[dates.length - 1],
          y1: resistance1,
          line: {
            color: '#800080',
            width: 2,
            dash: 'dash'
          }
        });
      }
      
      console.log('Çizgi kontrolleri:', {
        support1: support1?.toFixed(2),
        resistance1: resistance1?.toFixed(2),
        minPrice: minPrice.toFixed(2),
        maxPrice: maxPrice.toFixed(2),
        supportValid: support1 && support1 > minPrice * 0.95 && support1 < maxPrice * 1.05,
        resistanceValid: resistance1 && resistance1 > minPrice * 0.95 && resistance1 < maxPrice * 1.05
      });
      
      // Kanal çizgileri - kanal penceresine göre başlangıç
      const channelStartIndex = Math.max(0, dates.length - channelWindow);
      
      shapes.push(
        // Kanal tepe
        {
          type: 'line',
          x0: dates[channelStartIndex],
          y0: maxPrice,
          x1: dates[dates.length - 1],
          y1: maxPrice,
          line: {
            color: '#dc3545',
            width: 2,
            dash: 'dash'
          }
        },
        // Kanal dip
        {
          type: 'line',
          x0: dates[channelStartIndex],
          y0: minPrice,
          x1: dates[dates.length - 1],
          y1: minPrice,
          line: {
            color: '#198754',
            width: 2,
            dash: 'dash'
          }
        },
        // Orta bant
        {
          type: 'line',
          x0: dates[channelStartIndex],
          y0: (maxPrice + minPrice) / 2,
          x1: dates[dates.length - 1],
          y1: (maxPrice + minPrice) / 2,
          line: {
            color: '#0dcaf0',
            width: 1,
            dash: 'dot'
          }
        }
      );

      <% if @rsi_data && @rsi_data.length > 0 %>
      // RSI seviye çizgileri
      shapes.push(
        // RSI 70 (Aşırı Alım)
        {
          type: 'line',
          x0: dates[0],
          y0: 70,
          x1: dates[dates.length - 1],
          y1: 70,
          yref: 'y2',
          line: {
            color: '#e74c3c',
            width: 1,
            dash: 'dash'
          }
        },
        // RSI 30 (Aşırı Satım)
        {
          type: 'line',
          x0: dates[0],
          y0: 30,
          x1: dates[dates.length - 1],
          y1: 30,
          yref: 'y2',
          line: {
            color: '#27ae60',
            width: 1,
            dash: 'dash'
          }
        },
        // RSI 50 (Orta çizgi)
        {
          type: 'line',
          x0: dates[0],
          y0: 50,
          x1: dates[dates.length - 1],
          y1: 50,
          yref: 'y2',
          line: {
            color: '#95a5a6',
            width: 1,
            dash: 'dot'
          }
        }
      );
      <% end %>

      // Çizgi etiketleri - sadece geçerli olanları göster
      const annotations = [];
      
      // Destek ve direnç etiketleri - esnek koşullarla
      if (support1 && support1 > minPrice * 0.95 && support1 < maxPrice * 1.05) {
        annotations.push({
          x: dates[Math.floor(dates.length * 0.8)],
          y: support1,
          text: '🛡️ Destek: ' + support1.toFixed(2) + ' TL',
          showarrow: false,
          bgcolor: 'rgba(255, 165, 0, 0.9)',
          bordercolor: '#ffa500',
          borderwidth: 2,
          font: {color: 'white', size: 12, family: 'Arial, sans-serif'},
          borderradius: 5
        });
      }
      
      if (resistance1 && resistance1 > minPrice * 0.95 && resistance1 < maxPrice * 1.05) {
        annotations.push({
          x: dates[Math.floor(dates.length * 0.8)],
          y: resistance1,
          text: '⚔️ Direnç: ' + resistance1.toFixed(2) + ' TL',
          showarrow: false,
          bgcolor: 'rgba(128, 0, 128, 0.9)',
          bordercolor: '#800080',
          borderwidth: 2,
          font: {color: 'white', size: 12, family: 'Arial, sans-serif'},
          borderradius: 5
        });
      }
      
      // Kanal etiketleri - her zaman göster
      annotations.push(
        {
          x: dates[Math.floor(dates.length * 0.5)],
          y: maxPrice * 1.01, // Biraz yukarıda göster
          text: '🔺 Tepe: ' + maxPrice.toFixed(2) + ' TL',
          showarrow: false,
          bgcolor: 'rgba(220, 53, 69, 0.9)',
          bordercolor: '#dc3545',
          borderwidth: 2,
          font: {color: 'white', size: 12, family: 'Arial, sans-serif'},
          borderradius: 5
        },
        {
          x: dates[Math.floor(dates.length * 0.5)],
          y: minPrice * 0.99, // Biraz aşağıda göster
          text: '🔻 Dip: ' + minPrice.toFixed(2) + ' TL',
          showarrow: false,
          bgcolor: 'rgba(25, 135, 84, 0.9)',
          bordercolor: '#198754',
          borderwidth: 2,
          font: {color: 'white', size: 12, family: 'Arial, sans-serif'},
          borderradius: 5
        },
        {
          x: dates[Math.floor(dates.length * 0.2)],
          y: (maxPrice + minPrice) / 2,
          text: '➖ Orta: ' + ((maxPrice + minPrice) / 2).toFixed(2) + ' TL',
          showarrow: false,
          bgcolor: 'rgba(13, 202, 240, 0.9)',
          bordercolor: '#0dcaf0',
          borderwidth: 2,
          font: {color: 'white', size: 11, family: 'Arial, sans-serif'},
          borderradius: 5
        }
      );

      <% if @rsi_data && @rsi_data.length > 0 %>
      // RSI etiketleri
      annotations.push(
        {
          x: dates[Math.floor(dates.length * 0.9)],
          y: 70,
          yref: 'y2',
          text: '🔴 Aşırı Alım (70)',
          showarrow: false,
          bgcolor: 'rgba(231, 76, 60, 0.9)',
          bordercolor: '#e74c3c',
          borderwidth: 1,
          font: {color: 'white', size: 10, family: 'Arial, sans-serif'},
          borderradius: 3
        },
        {
          x: dates[Math.floor(dates.length * 0.9)],
          y: 30,
          yref: 'y2',
          text: '🟢 Aşırı Satım (30)',
          showarrow: false,
          bgcolor: 'rgba(39, 174, 96, 0.9)',
          bordercolor: '#27ae60',
          borderwidth: 1,
          font: {color: 'white', size: 10, family: 'Arial, sans-serif'},
          borderradius: 3
        }
      );
      <% end %>

      const layout = {
        title: false,
        dragmode: 'zoom',
        margin: {
          r: 10,
          t: 25,
          b: 40,
          l: 60
        },
        showlegend: false,
        font: {
          family: 'Arial, sans-serif',
          size: 12,
          color: '#333'
        },
        xaxis: {
          autorange: true,
          domain: [0, 1],
          range: [dates[0], dates[dates.length - 1]],
          rangeslider: {
            range: [dates[0], dates[dates.length - 1]],
            bgcolor: 'rgba(0,0,0,0.1)'
          },
          title: {
            text: '📅 Tarih',
            font: {size: 14, color: '#666'}
          },
          type: 'date',
          gridcolor: 'rgba(0,0,0,0.1)'
        },
        yaxis: {
          autorange: true,
          domain: [0.3, 1], // Ana grafik için alan
          range: [minPrice * 0.95, maxPrice * 1.05],
          title: {
            text: '💰 Fiyat (TL)',
            font: {size: 14, color: '#666'}
          },
          type: 'linear',
          gridcolor: 'rgba(0,0,0,0.1)',
          tickformat: '.2f',
          ticksuffix: ' TL'
        },
        <% if @rsi_data && @rsi_data.length > 0 %>
        yaxis2: {
          domain: [0, 0.25], // RSI için alt alan
          range: [0, 100],
          title: {
            text: '📊 RSI',
            font: {size: 12, color: '#9b59b6'}
          },
          type: 'linear',
          gridcolor: 'rgba(155, 89, 182, 0.1)',
          tickformat: '.0f',
          side: 'right',
          overlaying: 'y',
          showgrid: true,
          zeroline: false
        },
        <% end %>
        shapes: shapes,
        annotations: annotations,
        hovermode: 'x unified',
        plot_bgcolor: 'rgba(0,0,0,0)',
        paper_bgcolor: 'rgba(0,0,0,0)'
      };

      const config = {
        responsive: true,
        displayModeBar: true,
        modeBarButtonsToRemove: ['pan2d', 'select2d', 'lasso2d', 'resetScale2d', 'hoverClosestCartesian', 'hoverCompareCartesian'],
        displaylogo: false
      };

      // Tema güncellemesi için global fonksiyon
      window.updateChartTheme = function(theme) {
        const isDark = theme === 'dark';
        const updatedLayout = {
          ...layout,
          plot_bgcolor: isDark ? '#2d3748' : 'rgba(0,0,0,0)',
          paper_bgcolor: isDark ? '#2d3748' : 'rgba(0,0,0,0)',
          font: {
            ...layout.font,
            color: isDark ? '#e9ecef' : '#333'
          },
          xaxis: {
            ...layout.xaxis,
            gridcolor: isDark ? '#4a5568' : 'rgba(0,0,0,0.1)',
            title: {
              ...layout.xaxis.title,
              font: {size: 14, color: isDark ? '#9ca3af' : '#666'}
            }
          },
          yaxis: {
            ...layout.yaxis,
            gridcolor: isDark ? '#4a5568' : 'rgba(0,0,0,0.1)',
            title: {
              ...layout.yaxis.title,
              font: {size: 14, color: isDark ? '#9ca3af' : '#666'}
            }
          }<% if @rsi_data && @rsi_data.length > 0 %>,
          yaxis2: {
            ...layout.yaxis2,
            gridcolor: isDark ? 'rgba(155, 89, 182, 0.2)' : 'rgba(155, 89, 182, 0.1)',
            title: {
              ...layout.yaxis2.title,
              font: {size: 12, color: isDark ? '#bb86fc' : '#9b59b6'}
            }
          }<% end %>
        };
        
        Plotly.relayout('priceChart', updatedLayout);
      };
      
      try {
        // RSI Trace'i ekle (ikinci y-ekseni için)
        <% if @rsi_data && @rsi_data.length > 0 %>
        const rsiTrace = {
          x: dates,
          y: <%= @rsi_data.to_json %>,
          type: 'scatter',
          mode: 'lines',
          name: 'RSI (14)',
          line: {
            color: '#9b59b6',
            width: 2
          },
          yaxis: 'y2',
          hovertemplate: '<b>RSI:</b> %{y:.1f}<br><b>Tarih:</b> %{x}<extra></extra>'
        };
        <% end %>

        // Tüm trace'leri grafik verisi olarak ekle
        const allTraces = [candlestickTrace, ma20Trace, ma50Trace, ma200Trace<% if @rsi_data && @rsi_data.length > 0 %>, rsiTrace<% end %>];
        
        Plotly.newPlot('priceChart', allTraces, layout, config);
        console.log('Grafik başarıyla oluşturuldu');
        
        // Sayfa yüklendiğinde mevcut temayı uygula
        const currentTheme = document.documentElement.getAttribute('data-bs-theme') || 'light';
        window.updateChartTheme(currentTheme);
        
        // Hareketli ortalama toggle fonksiyonları
        setupMovingAverageToggles();
        
      } catch (error) {
        console.error('Grafik oluşturma hatası:', error);
        document.getElementById('priceChart').innerHTML = '<div class="alert alert-danger">Grafik oluşturulamadı: ' + error.message + '</div>';
      }
      
      // Hareketli ortalama ve RSI toggle fonksiyonları
      function setupMovingAverageToggles() {
        const ma20Toggle = document.getElementById('ma20Toggle');
        const ma50Toggle = document.getElementById('ma50Toggle');
        const ma200Toggle = document.getElementById('ma200Toggle');
        <% if @rsi_data && @rsi_data.length > 0 %>
        const rsiToggle = document.getElementById('rsiToggle');
        <% end %>
        
        // MA20 toggle
        ma20Toggle.addEventListener('change', function() {
          const visible = this.checked;
          Plotly.restyle('priceChart', {'visible': visible}, [1]); // Index 1 = ma20Trace
          console.log('MA20 görünürlük:', visible);
        });
        
        // MA50 toggle
        ma50Toggle.addEventListener('change', function() {
          const visible = this.checked;
          Plotly.restyle('priceChart', {'visible': visible}, [2]); // Index 2 = ma50Trace
          console.log('MA50 görünürlük:', visible);
        });
        
        // MA200 toggle
        ma200Toggle.addEventListener('change', function() {
          const visible = this.checked;
          Plotly.restyle('priceChart', {'visible': visible}, [3]); // Index 3 = ma200Trace
          console.log('MA200 görünürlük:', visible);
        });

        <% if @rsi_data && @rsi_data.length > 0 %>
        // RSI toggle - çizgiler ve etiketler dahil
        rsiToggle.addEventListener('change', function() {
          const visible = this.checked;
          
          // RSI trace'ini göster/gizle
          Plotly.restyle('priceChart', {'visible': visible}, [4]); // Index 4 = rsiTrace
          
          // RSI shapes ve annotations'ları güncelle
          updateRSIElements(visible);
          
          console.log('RSI görünürlük:', visible);
        });
        <% end %>
        
        // LocalStorage'dan durumları yükle
        const savedMA20 = localStorage.getItem('ma20Visible') === 'true';
        const savedMA50 = localStorage.getItem('ma50Visible') === 'true';
        const savedMA200 = localStorage.getItem('ma200Visible') === 'true';
        <% if @rsi_data && @rsi_data.length > 0 %>
        const savedRSI = localStorage.getItem('rsiVisible') !== 'false'; // Varsayılan olarak açık
        <% end %>
        
        // Kaydedilen durumları uygula
        if (savedMA20) {
          ma20Toggle.checked = true;
          Plotly.restyle('priceChart', {'visible': true}, [1]);
        }
        if (savedMA50) {
          ma50Toggle.checked = true;
          Plotly.restyle('priceChart', {'visible': true}, [2]);
        }
        if (savedMA200) {
          ma200Toggle.checked = true;
          Plotly.restyle('priceChart', {'visible': true}, [3]);
        }
        <% if @rsi_data && @rsi_data.length > 0 %>
        if (savedRSI) {
          rsiToggle.checked = true;
          Plotly.restyle('priceChart', {'visible': true}, [4]);
          // RSI elementleri zaten başlangıçta eklendi, hiçbir şey yapma
        } else {
          rsiToggle.checked = false;
          Plotly.restyle('priceChart', {'visible': false}, [4]);
          // RSI elementlerini gizle
          updateRSIElements(false);
        }
        <% end %>
        
        // Durumları LocalStorage'a kaydet
        ma20Toggle.addEventListener('change', function() {
          localStorage.setItem('ma20Visible', this.checked);
        });
        ma50Toggle.addEventListener('change', function() {
          localStorage.setItem('ma50Visible', this.checked);
        });
        ma200Toggle.addEventListener('change', function() {
          localStorage.setItem('ma200Visible', this.checked);
        });
        <% if @rsi_data && @rsi_data.length > 0 %>
        rsiToggle.addEventListener('change', function() {
          localStorage.setItem('rsiVisible', this.checked);
        });
        <% end %>
      }

      <% if @rsi_data && @rsi_data.length > 0 %>
      // RSI elementlerini güncelleme fonksiyonu
      function updateRSIElements(visible) {
        // Mevcut layout'u al
        const currentLayout = document.getElementById('priceChart').layout;
        
        // RSI shapes'lerini filtrele
        const nonRSIShapes = currentLayout.shapes.filter(shape => 
          shape.yref !== 'y2'
        );
        
        // RSI annotations'larını filtrele  
        const nonRSIAnnotations = currentLayout.annotations.filter(annotation => 
          annotation.yref !== 'y2'
        );
        
        let newShapes = [...nonRSIShapes];
        let newAnnotations = [...nonRSIAnnotations];
        
        if (visible) {
          // RSI shapes'lerini ekle
          newShapes.push(
            // RSI 70 (Aşırı Alım)
            {
              type: 'line',
              x0: dates[0],
              y0: 70,
              x1: dates[dates.length - 1],
              y1: 70,
              yref: 'y2',
              line: {
                color: '#e74c3c',
                width: 1,
                dash: 'dash'
              }
            },
            // RSI 30 (Aşırı Satım)
            {
              type: 'line',
              x0: dates[0],
              y0: 30,
              x1: dates[dates.length - 1],
              y1: 30,
              yref: 'y2',
              line: {
                color: '#27ae60',
                width: 1,
                dash: 'dash'
              }
            },
            // RSI 50 (Orta çizgi)
            {
              type: 'line',
              x0: dates[0],
              y0: 50,
              x1: dates[dates.length - 1],
              y1: 50,
              yref: 'y2',
              line: {
                color: '#95a5a6',
                width: 1,
                dash: 'dot'
              }
            }
          );
          
          // RSI annotations'larını ekle
          newAnnotations.push(
            {
              x: dates[Math.floor(dates.length * 0.9)],
              y: 70,
              yref: 'y2',
              text: '🔴 Aşırı Alım (70)',
              showarrow: false,
              bgcolor: 'rgba(231, 76, 60, 0.9)',
              bordercolor: '#e74c3c',
              borderwidth: 1,
              font: {color: 'white', size: 10, family: 'Arial, sans-serif'},
              borderradius: 3
            },
            {
              x: dates[Math.floor(dates.length * 0.9)],
              y: 30,
              yref: 'y2',
              text: '🟢 Aşırı Satım (30)',
              showarrow: false,
              bgcolor: 'rgba(39, 174, 96, 0.9)',
              bordercolor: '#27ae60',
              borderwidth: 1,
              font: {color: 'white', size: 10, family: 'Arial, sans-serif'},
              borderradius: 3
            }
          );
        }
        
        // Layout'u güncelle
        Plotly.relayout('priceChart', {
          shapes: newShapes,
          annotations: newAnnotations
        });
      }
      <% end %>
    });
</script>

<!-- RSI Güncel Değer Badge Stilleri -->
<style>
  .rsi-current-badge {
    font-size: 0.9rem !important;
    font-weight: 800 !important;
    padding: 6px 12px !important;
    border-radius: 8px !important;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
    letter-spacing: 0.5px !important;
    border: 2px solid transparent !important;
    transition: all 0.2s ease !important;
  }
  
  .rsi-current-badge:hover {
    transform: scale(1.05) !important;
    box-shadow: 0 3px 8px rgba(0,0,0,0.2) !important;
  }
  
  /* RSI Seviye Renkleri - Kompakt Versiyon */
  .bg-success.rsi-current-badge {
    background: linear-gradient(135deg, #27ae60, #2ecc71) !important;
    border-color: #27ae60 !important;
    color: white !important;
  }
  
  .bg-info.rsi-current-badge {
    background: linear-gradient(135deg, #3498db, #5dade2) !important;
    border-color: #3498db !important;
    color: white !important;
  }
  
  .bg-secondary.rsi-current-badge {
    background: linear-gradient(135deg, #95a5a6, #bdc3c7) !important;
    border-color: #95a5a6 !important;
    color: white !important;
  }
  
  .bg-warning.rsi-current-badge {
    background: linear-gradient(135deg, #f39c12, #f1c40f) !important;
    border-color: #f39c12 !important;
    color: #2c3e50 !important;
    text-shadow: 0 1px 2px rgba(255,255,255,0.3) !important;
  }
  
  .bg-danger.rsi-current-badge {
    background: linear-gradient(135deg, #e74c3c, #c0392b) !important;
    border-color: #e74c3c !important;
    color: white !important;
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .rsi-current-badge {
      font-size: 0.8rem !important;
      padding: 4px 8px !important;
    }
  }
</style>