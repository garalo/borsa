<div class="container mt-4">
    <div class="row">
      <div class="col-12">
        <div class="chart-container">
          <div class="d-flex justify-content-between align-items-center mb-4">
            <h2 class="h4 mb-0 text-primary"><%= @display_symbol %> <%= @range_labels[@selected_range] %> Fiyat Verileri</h2>
            <div class="btn-group" role="group">
              <% @range_labels.each do |range_key, range_label| %>
                <a href="/?:symbol=<%= @display_symbol %>&range=<%= range_key %>" 
                   class="btn btn-outline-primary btn-sm <%= 'active' if @selected_range == range_key %>">
                  <%= range_label %>
                </a>
              <% end %>
            </div>
          </div>
          
          <div class="row mb-3">
            <div class="col-md-6">
              <div class="d-flex align-items-center mb-2">
                <span class="text-muted me-2">üìà Kanal Analizi</span>
              </div>
              <div class="d-flex flex-wrap gap-2">
                <span class="badge bg-danger">Kanal Tepe: <span id="channelTop"></span> TL</span>
                <span class="badge bg-success">Kanal Dip: <span id="channelBottom"></span> TL</span>
                <span class="badge bg-info">Orta Bant: <span id="channelMiddle"></span> TL</span>
              </div>
              <div class="d-flex flex-wrap gap-2 mt-2">
                <span class="badge bg-warning text-dark">Trend: <span id="trendDirection"></span></span>
                <span class="badge bg-secondary">S√ºre: <span id="channelDays"></span> g√ºn</span>
              </div>
            </div>
            
            <div class="col-md-6">
              <div class="d-flex align-items-center mb-2">
                <span class="text-muted me-2">üéØ Destek & Diren√ß</span>
              </div>
              <div class="d-flex flex-wrap gap-2 mb-2">
                <span class="badge" style="background-color: #ffa500;">Destek: <span id="supportPrice"></span> TL</span>
                <span class="badge" style="background-color: #800080;">Diren√ß: <span id="resistancePrice"></span> TL</span>
              </div>
              <div class="d-flex align-items-center mb-2">
                <span class="text-muted me-2">üìä G√ºnl√ºk Veriler</span>
              </div>
              <div class="d-flex flex-wrap gap-1">
                <span class="badge bg-dark">A: <span id="dailyOpen"></span></span>
                <span class="badge bg-dark">Y: <span id="dailyHigh"></span></span>
                <span class="badge bg-dark">D: <span id="dailyLow"></span></span>
                <span class="badge bg-dark">K: <span id="dailyClose"></span></span>
              </div>
            </div>
          </div>
          
          <div id="priceChart" style="height: 500px;"></div>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const priceData = <%= @price_data.to_json %>;
      const prices = priceData.map(d => d.close);
      const dates = priceData.map(d => d.date);

      // Veri kontrol√º
      if (!priceData || priceData.length < 1) {
        console.error('Yetersiz veri:', priceData);
        document.getElementById('priceChart').innerHTML = '<div class="alert alert-warning">Veri y√ºklenemedi. L√ºtfen sayfayƒ± yenileyin.</div>';
        return;
      }
      
      console.log('Veri y√ºklendi:', priceData.length, 'kayƒ±t');

      // Zaman dilimine g√∂re analiz stratejisi
      const dataLength = prices.length;
      let analysisWindow, channelWindow;
      
      if (dataLength <= 7) {        // 1 hafta
        analysisWindow = dataLength;
        channelWindow = dataLength;
      } else if (dataLength <= 30) { // 1 ay
        analysisWindow = Math.min(20, dataLength);
        channelWindow = dataLength; // T√ºm veri
      } else if (dataLength <= 90) { // 3 ay
        analysisWindow = Math.min(60, dataLength);
        channelWindow = dataLength; // T√ºm veri
      } else if (dataLength <= 180) { // 6 ay
        analysisWindow = Math.min(90, dataLength); // Son 3 ay
        channelWindow = dataLength; // T√ºm veri
      } else if (dataLength <= 365) { // 1 yƒ±l
        analysisWindow = Math.min(120, dataLength); // Son 4 ay
        channelWindow = dataLength; // T√ºm 1 yƒ±llƒ±k veri
      } else {                      // 2 yƒ±l
        analysisWindow = Math.min(120, dataLength); // Son 4 ay (destek/diren√ß i√ßin)
        channelWindow = dataLength; // T√ºm 2 yƒ±llƒ±k veri
      }
      
      // Destek/diren√ß i√ßin son d√∂nem verilerini al
      const recentPriceData = priceData.slice(-analysisWindow);
      const recentPrices = recentPriceData.map(d => d.close);
      const recentHighs = recentPriceData.map(d => d.high);
      const recentLows = recentPriceData.map(d => d.low);
      
      // Kanal seviyeleri i√ßin daha geni≈ü veri kullan
      const channelPriceData = priceData.slice(-channelWindow);
      
      // Veriyi daha dikkatli filtrele
      const validChannelData = channelPriceData.filter(d => 
        d && d.high != null && d.low != null && 
        d.high > 0 && d.low > 0 && 
        !isNaN(d.high) && !isNaN(d.low)
      );
      
      const channelHighs = validChannelData.map(d => d.high);
      const channelLows = validChannelData.map(d => d.low);
      
      // Kanal seviyeleri - ge√ßerli verilerden
      const maxPrice = channelHighs.length > 0 ? Math.max(...channelHighs) : Math.max(...prices);
      const minPrice = channelLows.length > 0 ? Math.min(...channelLows) : Math.min(...prices);
      
      console.log('Kanal veri kontrol√º:', {
        totalData: channelPriceData.length,
        validData: validChannelData.length,
        invalidData: channelPriceData.length - validChannelData.length,
        minPrice: minPrice.toFixed(2),
        maxPrice: maxPrice.toFixed(2),
        sampleData: validChannelData.slice(0, 3).map(d => ({high: d.high, low: d.low}))
      });
      
      // Trend y√∂n√º - daha hassas hesaplama
      const trendSampleSize = Math.max(5, Math.floor(recentPrices.length * 0.25));
      const firstPeriodAvg = recentPrices.slice(0, trendSampleSize).reduce((a, b) => a + b, 0) / trendSampleSize;
      const lastPeriodAvg = recentPrices.slice(-trendSampleSize).reduce((a, b) => a + b, 0) / trendSampleSize;
      
      // Trend g√ºc√ºn√º de hesapla
      const trendStrength = Math.abs(lastPeriodAvg - firstPeriodAvg) / firstPeriodAvg * 100;
      let trendDirection;
      
      if (trendStrength < 2) {
        trendDirection = 'Yatay';
      } else if (lastPeriodAvg > firstPeriodAvg) {
        trendDirection = trendStrength > 10 ? 'G√º√ßl√º Y√ºkselen' : 'Y√ºkselen';
      } else {
        trendDirection = trendStrength > 10 ? 'G√º√ßl√º D√º≈üen' : 'D√º≈üen';
      }
      const channelDays = dates.length;

      // Bilgileri DOM'a yazdir
      document.getElementById('channelTop').textContent = maxPrice.toFixed(2);
      document.getElementById('channelBottom').textContent = minPrice.toFixed(2);
      document.getElementById('channelMiddle').textContent = ((maxPrice + minPrice) / 2).toFixed(2);
      document.getElementById('trendDirection').textContent = trendDirection;
      document.getElementById('channelDays').textContent = channelDays;

      // Destek ve Diren√ß Hesaplama - esnek y√∂ntem
      const analysisData = recentPriceData;
      const currentPrice = analysisData[analysisData.length - 1].close;
      
      // Swing point analizi - zaman dilimine g√∂re uyarlanmƒ±≈ü
      let swingWindow;
      if (dataLength <= 30) {
        swingWindow = 1; // Kƒ±sa d√∂nemde 1 g√ºnl√ºk pencere
      } else if (dataLength <= 90) {
        swingWindow = 2; // Orta d√∂nemde 2 g√ºnl√ºk pencere
      } else {
        swingWindow = 3; // Uzun d√∂nemde 3 g√ºnl√ºk pencere
      }
      
      const swingHighs = [];
      const swingLows = [];
      
      // Daha esnek swing point bulma
      for (let i = swingWindow; i < analysisData.length - swingWindow; i++) {
        const current = analysisData[i];
        let isSwingHigh = true;
        let isSwingLow = true;
        
        // √ñnceki ve sonraki g√ºnlerle kar≈üƒ±la≈ütƒ±r
        for (let j = 1; j <= swingWindow; j++) {
          if (current.high <= analysisData[i-j].high || current.high <= analysisData[i+j].high) {
            isSwingHigh = false;
          }
          if (current.low >= analysisData[i-j].low || current.low >= analysisData[i+j].low) {
            isSwingLow = false;
          }
        }
        
        if (isSwingHigh) swingHighs.push(current.high);
        if (isSwingLow) swingLows.push(current.low);
      }
      
      // Destek ve diren√ß hesaplama
      let support1, resistance1;
      
      // √ñnce swing point'leri dene
      if (swingLows.length > 0) {
        const validSupports = swingLows.filter(low => low < currentPrice);
        support1 = validSupports.length > 0 ? Math.max(...validSupports) : Math.min(...recentLows);
      } else {
        // Fallback: Alt %25'lik dilim
        const sortedLows = [...recentLows].sort((a, b) => a - b);
        support1 = sortedLows[Math.floor(sortedLows.length * 0.25)];
      }
      
      if (swingHighs.length > 0) {
        const validResistances = swingHighs.filter(high => high > currentPrice);
        resistance1 = validResistances.length > 0 ? Math.min(...validResistances) : Math.max(...recentHighs);
      } else {
        // Fallback: √úst %25'lik dilim
        const sortedHighs = [...recentHighs].sort((a, b) => b - a);
        resistance1 = sortedHighs[Math.floor(sortedHighs.length * 0.25)];
      }
      
      // Son kontrol - eƒüer hala bulunamadƒ±ysa basit y√∂ntem
      if (!support1 || support1 >= currentPrice) {
        const sortedLows = [...recentLows].sort((a, b) => a - b);
        support1 = sortedLows[Math.floor(sortedLows.length * 0.3)];
      }
      
      if (!resistance1 || resistance1 <= currentPrice) {
        const sortedHighs = [...recentHighs].sort((a, b) => b - a);
        resistance1 = sortedHighs[Math.floor(sortedHighs.length * 0.3)];
      }
      
      console.log('Analiz Bilgileri:', {
        dataLength,
        analysisWindow,
        channelWindow,
        swingWindow,
        swingHighs: swingHighs.length,
        swingLows: swingLows.length,
        currentPrice: currentPrice.toFixed(2),
        support1: support1.toFixed(2),
        resistance1: resistance1.toFixed(2),
        channelRange: `${minPrice.toFixed(2)} - ${maxPrice.toFixed(2)}`,
        channelMiddle: ((maxPrice + minPrice) / 2).toFixed(2),
        pricePosition: `Min: ${Math.min(...prices).toFixed(2)}, Max: ${Math.max(...prices).toFixed(2)}`
      });

      document.getElementById('supportPrice').textContent = support1.toFixed(2);
      document.getElementById('resistancePrice').textContent = resistance1.toFixed(2);

      // G√ºnl√ºk Bilgileri DOM'a yazdƒ±r
      const lastDay = priceData[priceData.length - 1];
      document.getElementById('dailyOpen').textContent = lastDay.open.toFixed(2);
      document.getElementById('dailyHigh').textContent = lastDay.high.toFixed(2);
      document.getElementById('dailyLow').textContent = lastDay.low.toFixed(2);
      document.getElementById('dailyClose').textContent = lastDay.close.toFixed(2);

      // Plotly.js ile mum grafiƒüi olu≈ütur
      const candlestickTrace = {
        x: dates,
        close: priceData.map(d => d.close),
        decreasing: {line: {color: '#ef5350'}},
        high: priceData.map(d => d.high),
        increasing: {line: {color: '#26a69a'}},
        line: {color: 'rgba(31,119,180,1)'},
        low: priceData.map(d => d.low),
        open: priceData.map(d => d.open),
        type: 'candlestick',
        name: 'Fiyat',
        xaxis: 'x',
        yaxis: 'y',
        hovertemplate: 
          '<b>üìÖ %{x}</b><br>' +
          '<span style="color:#28a745">üü¢ A√ßƒ±lƒ±≈ü: %{open:.2f} TL</span><br>' +
          '<span style="color:#dc3545">üî¥ Y√ºksek: %{high:.2f} TL</span><br>' +
          '<span style="color:#6f42c1">üü£ D√º≈ü√ºk: %{low:.2f} TL</span><br>' +
          '<span style="color:#007bff">üîµ Kapanƒ±≈ü: %{close:.2f} TL</span><br>' +
          '<extra></extra>',
        hoverlabel: {
          bgcolor: 'rgba(0, 0, 0, 0.9)',
          bordercolor: '#007bff',
          font: {
            color: 'white',
            size: 13,
            family: 'Arial, sans-serif'
          }
        }
      };

      // Teknik √ßizgiler - zaman dilimine g√∂re uyarlanmƒ±≈ü
      const shapes = [];
      
      // Destek ve diren√ß √ßizgileri i√ßin ba≈ülangƒ±√ß noktasƒ±
      let supportStartRatio;
      if (dataLength <= 30) {
        supportStartRatio = 0.3; // Kƒ±sa d√∂nemde %30'dan ba≈üla
      } else if (dataLength <= 90) {
        supportStartRatio = 0.5; // Orta d√∂nemde ortadan ba≈üla
      } else {
        supportStartRatio = 0.7; // Uzun d√∂nemde son %30'luk kƒ±sƒ±mda
      }
      
      const supportStartIndex = Math.floor(dates.length * supportStartRatio);
      
      // Destek √ßizgisi - daha esnek ko≈üul
      if (support1 && support1 > minPrice * 0.95 && support1 < maxPrice * 1.05) {
        shapes.push({
          type: 'line',
          x0: dates[supportStartIndex],
          y0: support1,
          x1: dates[dates.length - 1],
          y1: support1,
          line: {
            color: '#ffa500',
            width: 2,
            dash: 'dash'
          }
        });
      }
      
      // Diren√ß √ßizgisi - daha esnek ko≈üul
      if (resistance1 && resistance1 > minPrice * 0.95 && resistance1 < maxPrice * 1.05) {
        shapes.push({
          type: 'line',
          x0: dates[supportStartIndex],
          y0: resistance1,
          x1: dates[dates.length - 1],
          y1: resistance1,
          line: {
            color: '#800080',
            width: 2,
            dash: 'dash'
          }
        });
      }
      
      console.log('√áizgi kontrolleri:', {
        support1: support1?.toFixed(2),
        resistance1: resistance1?.toFixed(2),
        minPrice: minPrice.toFixed(2),
        maxPrice: maxPrice.toFixed(2),
        supportValid: support1 && support1 > minPrice * 0.95 && support1 < maxPrice * 1.05,
        resistanceValid: resistance1 && resistance1 > minPrice * 0.95 && resistance1 < maxPrice * 1.05
      });
      
      // Kanal √ßizgileri - kanal penceresine g√∂re ba≈ülangƒ±√ß
      const channelStartIndex = Math.max(0, dates.length - channelWindow);
      
      shapes.push(
        // Kanal tepe
        {
          type: 'line',
          x0: dates[channelStartIndex],
          y0: maxPrice,
          x1: dates[dates.length - 1],
          y1: maxPrice,
          line: {
            color: '#dc3545',
            width: 2,
            dash: 'dash'
          }
        },
        // Kanal dip
        {
          type: 'line',
          x0: dates[channelStartIndex],
          y0: minPrice,
          x1: dates[dates.length - 1],
          y1: minPrice,
          line: {
            color: '#198754',
            width: 2,
            dash: 'dash'
          }
        },
        // Orta bant
        {
          type: 'line',
          x0: dates[channelStartIndex],
          y0: (maxPrice + minPrice) / 2,
          x1: dates[dates.length - 1],
          y1: (maxPrice + minPrice) / 2,
          line: {
            color: '#0dcaf0',
            width: 1,
            dash: 'dot'
          }
        }
      );

      // √áizgi etiketleri - sadece ge√ßerli olanlarƒ± g√∂ster
      const annotations = [];
      
      // Destek ve diren√ß etiketleri - esnek ko≈üullarla
      if (support1 && support1 > minPrice * 0.95 && support1 < maxPrice * 1.05) {
        annotations.push({
          x: dates[Math.floor(dates.length * 0.8)],
          y: support1,
          text: 'üõ°Ô∏è Destek: ' + support1.toFixed(2) + ' TL',
          showarrow: false,
          bgcolor: 'rgba(255, 165, 0, 0.9)',
          bordercolor: '#ffa500',
          borderwidth: 2,
          font: {color: 'white', size: 12, family: 'Arial, sans-serif'},
          borderradius: 5
        });
      }
      
      if (resistance1 && resistance1 > minPrice * 0.95 && resistance1 < maxPrice * 1.05) {
        annotations.push({
          x: dates[Math.floor(dates.length * 0.8)],
          y: resistance1,
          text: '‚öîÔ∏è Diren√ß: ' + resistance1.toFixed(2) + ' TL',
          showarrow: false,
          bgcolor: 'rgba(128, 0, 128, 0.9)',
          bordercolor: '#800080',
          borderwidth: 2,
          font: {color: 'white', size: 12, family: 'Arial, sans-serif'},
          borderradius: 5
        });
      }
      
      // Kanal etiketleri - her zaman g√∂ster
      annotations.push(
        {
          x: dates[Math.floor(dates.length * 0.5)],
          y: maxPrice * 1.01, // Biraz yukarƒ±da g√∂ster
          text: 'üî∫ Tepe: ' + maxPrice.toFixed(2) + ' TL',
          showarrow: false,
          bgcolor: 'rgba(220, 53, 69, 0.9)',
          bordercolor: '#dc3545',
          borderwidth: 2,
          font: {color: 'white', size: 12, family: 'Arial, sans-serif'},
          borderradius: 5
        },
        {
          x: dates[Math.floor(dates.length * 0.5)],
          y: minPrice * 0.99, // Biraz a≈üaƒüƒ±da g√∂ster
          text: 'üîª Dip: ' + minPrice.toFixed(2) + ' TL',
          showarrow: false,
          bgcolor: 'rgba(25, 135, 84, 0.9)',
          bordercolor: '#198754',
          borderwidth: 2,
          font: {color: 'white', size: 12, family: 'Arial, sans-serif'},
          borderradius: 5
        },
        {
          x: dates[Math.floor(dates.length * 0.2)],
          y: (maxPrice + minPrice) / 2,
          text: '‚ûñ Orta: ' + ((maxPrice + minPrice) / 2).toFixed(2) + ' TL',
          showarrow: false,
          bgcolor: 'rgba(13, 202, 240, 0.9)',
          bordercolor: '#0dcaf0',
          borderwidth: 2,
          font: {color: 'white', size: 11, family: 'Arial, sans-serif'},
          borderradius: 5
        }
      );

      const layout = {
        title: false,
        dragmode: 'zoom',
        margin: {
          r: 10,
          t: 25,
          b: 40,
          l: 60
        },
        showlegend: false,
        font: {
          family: 'Arial, sans-serif',
          size: 12,
          color: '#333'
        },
        xaxis: {
          autorange: true,
          domain: [0, 1],
          range: [dates[0], dates[dates.length - 1]],
          rangeslider: {
            range: [dates[0], dates[dates.length - 1]],
            bgcolor: 'rgba(0,0,0,0.1)'
          },
          title: {
            text: 'üìÖ Tarih',
            font: {size: 14, color: '#666'}
          },
          type: 'date',
          gridcolor: 'rgba(0,0,0,0.1)'
        },
        yaxis: {
          autorange: true,
          domain: [0, 1],
          range: [minPrice * 0.95, maxPrice * 1.05],
          title: {
            text: 'üí∞ Fiyat (TL)',
            font: {size: 14, color: '#666'}
          },
          type: 'linear',
          gridcolor: 'rgba(0,0,0,0.1)',
          tickformat: '.2f',
          ticksuffix: ' TL'
        },
        shapes: shapes,
        annotations: annotations,
        hovermode: 'x unified',
        plot_bgcolor: 'rgba(0,0,0,0)',
        paper_bgcolor: 'rgba(0,0,0,0)'
      };

      const config = {
        responsive: true,
        displayModeBar: true,
        modeBarButtonsToRemove: ['pan2d', 'select2d', 'lasso2d', 'resetScale2d', 'hoverClosestCartesian', 'hoverCompareCartesian'],
        displaylogo: false
      };

      try {
        Plotly.newPlot('priceChart', [candlestickTrace], layout, config);
        console.log('Grafik ba≈üarƒ±yla olu≈üturuldu');
      } catch (error) {
        console.error('Grafik olu≈üturma hatasƒ±:', error);
        document.getElementById('priceChart').innerHTML = '<div class="alert alert-danger">Grafik olu≈üturulamadƒ±: ' + error.message + '</div>';
      }
    });
</script>