<div class="container mt-4">
    <div class="row">
      <div class="col-12">
        <div class="chart-container">
          <h2 class="h4 mb-4 text-primary"><%= @display_symbol %> 6 Aylƒ±k Kapanƒ±≈ü Fiyatlarƒ±</h2>
          
          <div class="row mb-3">
            <div class="col-md-6">
              <div class="d-flex align-items-center mb-2">
                <span class="text-muted me-2">üìà Kanal Analizi</span>
              </div>
              <div class="d-flex flex-wrap gap-2">
                <span class="badge bg-danger">Kanal Tepe: <span id="channelTop"></span> TL</span>
                <span class="badge bg-success">Kanal Dip: <span id="channelBottom"></span> TL</span>
                <span class="badge bg-info">Orta Bant: <span id="channelMiddle"></span> TL</span>
              </div>
              <div class="d-flex flex-wrap gap-2 mt-2">
                <span class="badge bg-warning text-dark">Trend: <span id="trendDirection"></span></span>
                <span class="badge bg-secondary">S√ºre: <span id="channelDays"></span> g√ºn</span>
              </div>
            </div>
            
            <div class="col-md-6">
              <div class="d-flex align-items-center mb-2">
                <span class="text-muted me-2">üéØ Destek & Diren√ß</span>
              </div>
              <div class="d-flex flex-wrap gap-2 mb-2">
                <span class="badge" style="background-color: #ffa500;">Destek: <span id="supportPrice"></span> TL</span>
                <span class="badge" style="background-color: #800080;">Diren√ß: <span id="resistancePrice"></span> TL</span>
              </div>
              <div class="d-flex align-items-center mb-2">
                <span class="text-muted me-2">üìä G√ºnl√ºk Veriler</span>
              </div>
              <div class="d-flex flex-wrap gap-1">
                <span class="badge bg-dark">A: <span id="dailyOpen"></span></span>
                <span class="badge bg-dark">Y: <span id="dailyHigh"></span></span>
                <span class="badge bg-dark">D: <span id="dailyLow"></span></span>
                <span class="badge bg-dark">K: <span id="dailyClose"></span></span>
              </div>
            </div>
          </div>
          
          <div id="priceChart" style="height: 500px;"></div>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const priceData = <%= @price_data.to_json %>;
      const prices = priceData.map(d => d.close);
      const dates = priceData.map(d => d.date);

      // Trend analizi i√ßin deƒüi≈ükenler
      const maxPrice = Math.max(...prices);
      const minPrice = Math.min(...prices);
      const firstPrice = prices[0];
      const lastPrice = prices[prices.length - 1];
      const trendDirection = lastPrice > firstPrice ? 'Y√ºkselen' : 'D√º≈üen';
      const channelDays = dates.length;

      // Bilgileri DOM'a yazdir
      document.getElementById('channelTop').textContent = maxPrice.toFixed(2);
      document.getElementById('channelBottom').textContent = minPrice.toFixed(2);
      document.getElementById('channelMiddle').textContent = ((maxPrice + minPrice) / 2).toFixed(2);
      document.getElementById('trendDirection').textContent = trendDirection;
      document.getElementById('channelDays').textContent = channelDays;

      // Destek ve Diren√ß Hesaplama (Basit Pivot Noktasƒ±)
      const lastDay = priceData[priceData.length - 1];
      const pivot = (lastDay.high + lastDay.low + lastDay.close) / 3;
      const resistance1 = (2 * pivot) - lastDay.low;
      const support1 = (2 * pivot) - lastDay.high;

      document.getElementById('supportPrice').textContent = support1.toFixed(2);
      document.getElementById('resistancePrice').textContent = resistance1.toFixed(2);

      // G√ºnl√ºk Bilgileri DOM'a yazdƒ±r
      document.getElementById('dailyOpen').textContent = lastDay.open.toFixed(2);
      document.getElementById('dailyHigh').textContent = lastDay.high.toFixed(2);
      document.getElementById('dailyLow').textContent = lastDay.low.toFixed(2);
      document.getElementById('dailyClose').textContent = lastDay.close.toFixed(2);

      // Plotly.js ile mum grafiƒüi olu≈ütur
      const candlestickTrace = {
        x: dates,
        close: priceData.map(d => d.close),
        decreasing: {line: {color: '#ef5350'}},
        high: priceData.map(d => d.high),
        increasing: {line: {color: '#26a69a'}},
        line: {color: 'rgba(31,119,180,1)'},
        low: priceData.map(d => d.low),
        open: priceData.map(d => d.open),
        type: 'candlestick',
        name: 'Fiyat',
        xaxis: 'x',
        yaxis: 'y',
        hovertemplate: 
          '<b>üìÖ %{x}</b><br>' +
          '<span style="color:#28a745">üü¢ A√ßƒ±lƒ±≈ü: %{open:.2f} TL</span><br>' +
          '<span style="color:#dc3545">üî¥ Y√ºksek: %{high:.2f} TL</span><br>' +
          '<span style="color:#6f42c1">üü£ D√º≈ü√ºk: %{low:.2f} TL</span><br>' +
          '<span style="color:#007bff">üîµ Kapanƒ±≈ü: %{close:.2f} TL</span><br>' +
          '<extra></extra>',
        hoverlabel: {
          bgcolor: 'rgba(0, 0, 0, 0.9)',
          bordercolor: '#007bff',
          font: {
            color: 'white',
            size: 13,
            family: 'Arial, sans-serif'
          }
        }
      };

      // Teknik √ßizgiler
      const shapes = [
        // Destek √ßizgisi
        {
          type: 'line',
          x0: dates[0],
          y0: support1,
          x1: dates[dates.length - 1],
          y1: support1,
          line: {
            color: '#ffa500',
            width: 2,
            dash: 'dash'
          }
        },
        // Diren√ß √ßizgisi
        {
          type: 'line',
          x0: dates[0],
          y0: resistance1,
          x1: dates[dates.length - 1],
          y1: resistance1,
          line: {
            color: '#800080',
            width: 2,
            dash: 'dash'
          }
        },
        // Kanal tepe
        {
          type: 'line',
          x0: dates[0],
          y0: maxPrice,
          x1: dates[dates.length - 1],
          y1: maxPrice,
          line: {
            color: '#dc3545',
            width: 2,
            dash: 'dash'
          }
        },
        // Kanal dip
        {
          type: 'line',
          x0: dates[0],
          y0: minPrice,
          x1: dates[dates.length - 1],
          y1: minPrice,
          line: {
            color: '#198754',
            width: 2,
            dash: 'dash'
          }
        },
        // Orta bant
        {
          type: 'line',
          x0: dates[0],
          y0: (maxPrice + minPrice) / 2,
          x1: dates[dates.length - 1],
          y1: (maxPrice + minPrice) / 2,
          line: {
            color: '#0dcaf0',
            width: 1,
            dash: 'dot'
          }
        }
      ];

      // √áizgi etiketleri - T√ºrk√ße ve renkli
      const annotations = [
        {
          x: dates[Math.floor(dates.length * 0.8)],
          y: support1,
          text: 'üõ°Ô∏è Destek: ' + support1.toFixed(2) + ' TL',
          showarrow: false,
          bgcolor: 'rgba(255, 165, 0, 0.9)',
          bordercolor: '#ffa500',
          borderwidth: 2,
          font: {color: 'white', size: 12, family: 'Arial, sans-serif'},
          borderradius: 5
        },
        {
          x: dates[Math.floor(dates.length * 0.8)],
          y: resistance1,
          text: '‚öîÔ∏è Diren√ß: ' + resistance1.toFixed(2) + ' TL',
          showarrow: false,
          bgcolor: 'rgba(128, 0, 128, 0.9)',
          bordercolor: '#800080',
          borderwidth: 2,
          font: {color: 'white', size: 12, family: 'Arial, sans-serif'},
          borderradius: 5
        },
        {
          x: dates[Math.floor(dates.length * 0.5)],
          y: maxPrice,
          text: 'üî∫ Tepe: ' + maxPrice.toFixed(2) + ' TL',
          showarrow: false,
          bgcolor: 'rgba(220, 53, 69, 0.9)',
          bordercolor: '#dc3545',
          borderwidth: 2,
          font: {color: 'white', size: 12, family: 'Arial, sans-serif'},
          borderradius: 5
        },
        {
          x: dates[Math.floor(dates.length * 0.5)],
          y: minPrice,
          text: 'üîª Dip: ' + minPrice.toFixed(2) + ' TL',
          showarrow: false,
          bgcolor: 'rgba(25, 135, 84, 0.9)',
          bordercolor: '#198754',
          borderwidth: 2,
          font: {color: 'white', size: 12, family: 'Arial, sans-serif'},
          borderradius: 5
        },
        {
          x: dates[Math.floor(dates.length * 0.2)],
          y: (maxPrice + minPrice) / 2,
          text: '‚ûñ Orta: ' + ((maxPrice + minPrice) / 2).toFixed(2) + ' TL',
          showarrow: false,
          bgcolor: 'rgba(13, 202, 240, 0.9)',
          bordercolor: '#0dcaf0',
          borderwidth: 2,
          font: {color: 'white', size: 11, family: 'Arial, sans-serif'},
          borderradius: 5
        }
      ];

      const layout = {
        title: false,
        dragmode: 'zoom',
        margin: {
          r: 10,
          t: 25,
          b: 40,
          l: 60
        },
        showlegend: false,
        font: {
          family: 'Arial, sans-serif',
          size: 12,
          color: '#333'
        },
        xaxis: {
          autorange: true,
          domain: [0, 1],
          range: [dates[0], dates[dates.length - 1]],
          rangeslider: {
            range: [dates[0], dates[dates.length - 1]],
            bgcolor: 'rgba(0,0,0,0.1)'
          },
          title: {
            text: 'üìÖ Tarih',
            font: {size: 14, color: '#666'}
          },
          type: 'date',
          gridcolor: 'rgba(0,0,0,0.1)'
        },
        yaxis: {
          autorange: true,
          domain: [0, 1],
          range: [minPrice * 0.95, maxPrice * 1.05],
          title: {
            text: 'üí∞ Fiyat (TL)',
            font: {size: 14, color: '#666'}
          },
          type: 'linear',
          gridcolor: 'rgba(0,0,0,0.1)',
          tickformat: '.2f',
          ticksuffix: ' TL'
        },
        shapes: shapes,
        annotations: annotations,
        hovermode: 'x unified',
        plot_bgcolor: 'rgba(0,0,0,0)',
        paper_bgcolor: 'rgba(0,0,0,0)'
      };

      const config = {
        responsive: true,
        displayModeBar: true,
        modeBarButtonsToRemove: ['pan2d', 'select2d', 'lasso2d', 'resetScale2d', 'hoverClosestCartesian', 'hoverCompareCartesian'],
        displaylogo: false
      };

      Plotly.newPlot('priceChart', [candlestickTrace], layout, config);
    });
</script>