
<div class="container mt-4">
    <div class="row">
      <div class="col-12">
        <div class="chart-container">
          <h2 class="h4 mb-4 text-primary"><%= @display_symbol %> 6 AylÄ±k KapanÄ±ÅŸ FiyatlarÄ±</h2>
          
          <div class="row mb-3">
            <div class="col-md-6">
              <div class="d-flex align-items-center mb-2">
                <span class="text-muted me-2">ðŸ“ˆ Kanal Analizi</span>
              </div>
              <div class="d-flex flex-wrap gap-2">
                <span class="badge bg-danger">Kanal Tepe: <span id="channelTop"></span> TL</span>
                <span class="badge bg-success">Kanal Dip: <span id="channelBottom"></span> TL</span>
                <span class="badge bg-info">Orta Bant: <span id="channelMiddle"></span> TL</span>
              </div>
              <div class="d-flex flex-wrap gap-2 mt-2">
                <span class="badge bg-warning text-dark">Trend: <span id="trendDirection"></span></span>
                <span class="badge bg-secondary">SÃ¼re: <span id="channelDays"></span> gÃ¼n</span>
              </div>
            </div>
            
            <div class="col-md-6">
              <div class="d-flex align-items-center mb-2">
                <span class="text-muted me-2">ðŸŽ¯ Destek & DirenÃ§</span>
              </div>
              <div class="d-flex flex-wrap gap-2 mb-2">
                <span class="badge" style="background-color: #ffa500;">Destek: <span id="supportPrice"></span> TL</span>
                <span class="badge" style="background-color: #800080;">DirenÃ§: <span id="resistancePrice"></span> TL</span>
              </div>
              <div class="d-flex align-items-center mb-2">
                <span class="text-muted me-2">ðŸ“Š GÃ¼nlÃ¼k Veriler</span>
              </div>
              <div class="d-flex flex-wrap gap-1">
                <span class="badge bg-dark">A: <span id="dailyOpen"></span></span>
                <span class="badge bg-dark">Y: <span id="dailyHigh"></span></span>
                <span class="badge bg-dark">D: <span id="dailyLow"></span></span>
                <span class="badge bg-dark">K: <span id="dailyClose"></span></span>
              </div>
            </div>
          </div>
          
          <div style="height: 500px;">
            <canvas id="priceChart"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@2.0.0/dist/chartjs-plugin-annotation.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const priceData = <%= @price_data.to_json %>;
      const prices = priceData.map(d => d.close);
      const dates = priceData.map(d => d.date);
      


      // Chart oluÅŸtur
      const ctx = document.getElementById('priceChart').getContext('2d');
      if (window.myChart != undefined) window.myChart.destroy();

      // Trend analizi iÃ§in deÄŸiÅŸkenler
      const maxPrice = Math.max(...prices);
      const minPrice = Math.min(...prices);
      const maxIndex = prices.indexOf(maxPrice);
      const minIndex = prices.indexOf(minPrice);
      const priceRange = maxPrice - minPrice;
      
      // Trend yÃ¶nÃ¼nÃ¼ belirle
      const firstPrice = prices[0];
      const lastPrice = prices[prices.length - 1];
      const trendDirection = lastPrice > firstPrice ? 'YÃ¼kselen' : 'DÃ¼ÅŸen';
      const channelDays = dates.length;
      
      // Tepe ve dip noktalarÄ±ndan geÃ§en doÄŸrularÄ±n eÄŸimini hesapla
      const upperSlope = (prices[prices.length - 1] - prices[0]) / (prices.length - 1);
      const lowerSlope = upperSlope; // Paralel Ã§izgiler iÃ§in aynÄ± eÄŸim
      
      // Trend kanalÄ± Ã§izgileri iÃ§in koordinatlar
      const trendLines = {
        upper: {
          start: { x: 0, y: maxPrice },
          end: { x: prices.length - 1, y: maxPrice }
        },
        lower: {
          start: { x: 0, y: minPrice },
          end: { x: prices.length - 1, y: minPrice }
        },
        middle: {
          start: { x: 0, y: (maxPrice + minPrice) / 2 },
          end: { x: prices.length - 1, y: (maxPrice + minPrice) / 2 }
        }
      };

      // Bilgileri DOM'a yazdir
      document.getElementById('channelTop').textContent = maxPrice.toFixed(2);
      document.getElementById('channelBottom').textContent = minPrice.toFixed(2);
      document.getElementById('channelMiddle').textContent = ((maxPrice + minPrice) / 2).toFixed(2);
      document.getElementById('trendDirection').textContent = trendDirection;
      document.getElementById('channelDays').textContent = channelDays;

      // Destek ve DirenÃ§ Hesaplama (Basit Pivot NoktasÄ±)
      const lastDay = priceData[priceData.length - 1];
      const pivot = (lastDay.high + lastDay.low + lastDay.close) / 3;
      const resistance1 = (2 * pivot) - lastDay.low;
      const support1 = (2 * pivot) - lastDay.high;

      document.getElementById('supportPrice').textContent = support1.toFixed(2);
      document.getElementById('resistancePrice').textContent = resistance1.toFixed(2);

      // GÃ¼nlÃ¼k Bilgileri DOM'a yazdÄ±r
      document.getElementById('dailyOpen').textContent = lastDay.open.toFixed(2);
      document.getElementById('dailyHigh').textContent = lastDay.high.toFixed(2);
      document.getElementById('dailyLow').textContent = lastDay.low.toFixed(2);
      document.getElementById('dailyClose').textContent = lastDay.close.toFixed(2);

      // Chart.js annotation plugin'ini register et
      Chart.register(window['chartjs-plugin-annotation']);
      
      try {
        window.myChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: dates,
            datasets: [{
              label: 'KapanÄ±ÅŸ FiyatÄ± (TL)',
              data: prices,
              borderColor: '#007bff',
              backgroundColor: 'rgba(0, 123, 255, 0.1)',
              borderWidth: 2,
              pointBackgroundColor: '#007bff',
              pointBorderColor: '#ffffff',
              pointBorderWidth: 1,
              pointRadius: 2,
              pointHoverRadius: 4,
              fill: true,
              tension: 0.1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            interaction: {
              intersect: false,
              mode: 'index'
            },
            plugins: {
              legend: {
                display: true,
                position: 'top',
                labels: {
                  font: {
                    size: 14,
                    weight: 'bold'
                  },
                  color: '#374151'
                }
              },
              tooltip: {
                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                titleColor: 'white',
                bodyColor: 'white',
                borderColor: '#2563eb',
                borderWidth: 1,
                cornerRadius: 8,
                displayColors: false,
                callbacks: {
                  title: function(context) {
                    return 'Tarih: ' + context[0].label;
                  },
                  label: function(context) {
                    return 'KapanÄ±ÅŸ: ' + context.parsed.y.toFixed(2) + ' TL';
                  }
                }
              },
              annotation: {
                annotations: {
                  // Destek ve DirenÃ§ Ã‡izgileri
                  supportLine: {
                    type: 'line',
                    yMin: support1,
                    yMax: support1,
                    borderColor: '#ffa500',
                    borderWidth: 2,
                    borderDash: [5, 5],
                    label: {
                      display: true,
                      content: 'Destek: ' + support1.toFixed(2),
                      position: 'center',
                      backgroundColor: 'rgba(255, 165, 0, 0.8)',
                      color: 'white',
                      font: {
                        size: 11,
                        weight: 'bold'
                      },
                      padding: 4,
                      borderRadius: 3
                    }
                  },
                  resistanceLine: {
                    type: 'line',
                    yMin: resistance1,
                    yMax: resistance1,
                    borderColor: '#800080',
                    borderWidth: 2,
                    borderDash: [5, 5],
                    label: {
                      display: true,
                      content: 'DirenÃ§: ' + resistance1.toFixed(2),
                      position: 'center',
                      backgroundColor: 'rgba(128, 0, 128, 0.8)',
                      color: 'white',
                      font: {
                        size: 11,
                        weight: 'bold'
                      },
                      padding: 4,
                      borderRadius: 3
                    }
                  },
                  upperLine: {
                    type: 'line',
                    yMin: maxPrice,
                    yMax: maxPrice,
                    borderColor: '#dc3545',
                    borderWidth: 2,
                    borderDash: [5, 5],
                    label: {
                      display: true,
                      content: 'Tepe: ' + maxPrice.toFixed(2),
                      position: 'center',
                      backgroundColor: 'rgba(220, 53, 69, 0.8)',
                      color: 'white',
                      font: {
                        size: 11,
                        weight: 'bold'
                      },
                      padding: 4,
                      borderRadius: 3
                    }
                  },
                  middleLine: {
                    type: 'line',
                    yMin: (maxPrice + minPrice) / 2,
                    yMax: (maxPrice + minPrice) / 2,
                    borderColor: '#0dcaf0',
                    borderWidth: 1,
                    borderDash: [3, 3],
                    label: {
                      display: true,
                      content: 'Orta: ' + ((maxPrice + minPrice) / 2).toFixed(2),
                      position: 'center',
                      backgroundColor: 'rgba(13, 202, 240, 0.8)',
                      color: 'white',
                      font: {
                        size: 10,
                        weight: 'bold'
                      },
                      padding: 3,
                      borderRadius: 3
                    }
                  },
                  lowerLine: {
                    type: 'line',
                    yMin: minPrice,
                    yMax: minPrice,
                    borderColor: '#198754',
                    borderWidth: 2,
                    borderDash: [5, 5],
                    label: {
                      display: true,
                      content: 'Dip: ' + minPrice.toFixed(2),
                      position: 'center',
                      backgroundColor: 'rgba(25, 135, 84, 0.8)',
                      color: 'white',
                      font: {
                        size: 11,
                        weight: 'bold'
                      },
                      padding: 4,
                      borderRadius: 3
                    }
                  }
                }
              }
            },
            scales: {
              x: {
                grid: {
                  color: 'rgba(0, 0, 0, 0.1)',
                  borderColor: 'rgba(0, 0, 0, 0.2)'
                },
                ticks: {
                  color: '#666',
                  maxTicksLimit: 10
                }
              },
              y: { 
                beginAtZero: false,
                suggestedMin: minPrice * 0.95,
                suggestedMax: maxPrice * 1.05,
                grid: {
                  color: 'rgba(0, 0, 0, 0.1)',
                  borderColor: 'rgba(0, 0, 0, 0.2)'
                },
                ticks: {
                  color: '#666',
                  callback: function(value) {
                    return value.toFixed(2) + ' TL';
                  }
                }
              }
            }
          }
        });
      } catch (error) {
        console.error("Grafik oluÅŸturulurken bir hata oluÅŸtu:", error);
      }
    });
</script>

     
